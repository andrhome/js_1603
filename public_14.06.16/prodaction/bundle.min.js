
window.addEventListener('DOMContentLoaded', function()  {
	new Slider( document.querySelector('.val-list-slider') );
    new Weather();
    new Currency();
    new CreateIframe(document.querySelector('.val-iframe-streams'));
    new PopUp(); 
    new Category();
});
function CreateIframe(elem) {

	if(!elem) return;

	var dataFrame = elem.getAttribute('data-src'),
		arr = dataFrame.split(','),
		readyIframe = '';

	// Цыклом заполняем src у iframe и записываем готовые iframes в виде строки в readyIframe
	for(var i = 0; i < arr.length; i++) {
		readyIframe += this.template(arr[i]);
	}

	elem.insertAdjacentHTML('afterBegin', readyIframe); // Вставляем готовые iframes в блок див source
};

// Метод для создания iframes
CreateIframe.prototype.template = function(src) {
	var block = '<div class="val-iframe-streams">' +
					'<span class="val-ico-online">' +
						'<i></i>' +
					'</span>' + 
					'<iframe src="'+ src + '"></iframe>' +
				'</div>';
	return block;
};
function Currency() {

	var self = this;

	var currencyXhr = new XMLHttpRequest();
	currencyXhr.open('GET', 'http://' + location.hostname + '/site/tryCurrency', true);
	currencyXhr.onreadystatechange = function() {

		if(currencyXhr.status == 200 && currencyXhr.readyState == 4) {

			var currXhrObj = JSON.parse(currencyXhr.responseText);

			self.getBankInfo(currXhrObj);

		};
	};

	currencyXhr.send();
};

Currency.prototype.getBankInfo = function(xhrObject) {
    var bankObj = [],
        currentBank = '',
        arrBanks = ["ПриватБанк", "ПУМБ", "Укрсоцбанк"];

    for (var i = 0; i < xhrObject.length; i++) {
        if(currentBank != xhrObject[i].bankName) {
            if(obj && Object.keys(obj).length > 0) {
                bankObj.push(obj); 
            };
            var obj = {};

            if(arrBanks.indexOf(xhrObject[i].bankName) == -1) continue;

            obj.bankName = xhrObject[i].bankName;
            obj[xhrObject[i].codeAlpha] = {
                rateBuy: xhrObject[i].rateBuy,
                rateBuyDelta: xhrObject[i].rateBuyDelta,
                rateSale: xhrObject[i].rateSale,
                rateSaleDelta: xhrObject[i].rateSaleDelta
            };              
        } else {
            obj[xhrObject[i].codeAlpha] = {
                rateBuy: xhrObject[i].rateBuy,
                rateBuyDelta: xhrObject[i].rateBuyDelta,
                rateSale: xhrObject[i].rateSale,
                rateSaleDelta: xhrObject[i].rateSaleDelta
            };
        };
        currentBank = xhrObject[i].bankName; 
    };

   this.currencyTemplate(bankObj);
};

Currency.prototype.genereteBuySaleHtml = function(obj, rate, rateDelta) {
    var eurDelta = function () {
        if (obj.EUR[rateDelta] > 0) {
            return '<i class="-to-hight"> &nbsp; &#9650;</i>'
        } else if (obj.EUR[rateDelta] < 0) {
            return '<i class="-to-low"> &nbsp; &#9660;</i>'
        } else {return ''};
    };
    var usdDelta = function () {
        if (obj.USD[rateDelta] > 0) {
            return '<i class="-to-hight"> &nbsp; &#9650;</i>'
        } else if (obj.USD[rateDelta] < 0) {
            return '<i class="-to-low"> &nbsp; &#9660;</i>'
        } else {return ''};
    };
    var rubDelta = function () {
        if (obj.RUB[rateDelta] > 0) {
            return '<i class="-to-hight"> &nbsp; &#9650;</i>'
        } else if (obj.RUB[rateDelta] < 0) {
            return '<i class="-to-low"> &nbsp; &#9660;</i>'
        } else {return ''};
    };
    var buySaleHtml = '<span>' + 
                            '<mark>' + obj.EUR[rate] + 
                            '</mark>' + (eurDelta()) +
                        '</span>'  +
                        '<span>' + 
                            '<mark>' + obj.USD[rate] + 
                            '</mark>' + (usdDelta()) +
                        '</span>'  +
                        '<span>' + 
                            '<mark>' + obj.RUB[rate] + 
                            '</mark>' + (rubDelta()) +
                        '</span>';
    return buySaleHtml;
};

Currency.prototype.currencyTemplate = function(bankObject) {
    var bank = '';
    for (var i = 0; i < bankObject.length; i++) {
        bank += '<tr>' +
                    '<td>' +
                        '<p><i>' + bankObject[i].bankName + '</i></p>' +
                    '</td>' +
                    '<td>' +
                        '<span>' +
                            '<b>&euro;</b>' +
                        '</span>' +
                        '<span>' +
                            '<b>$</b>' +
                        '</span>' +
                        '<span>' +
                            '<b>R</b>' +
                        '</span>' +
                    '</td>' +
                    '<td>' + 
                        this.genereteBuySaleHtml(bankObject[i], 'rateBuy', 'rateBuyDelta') +
                    '</td>' +
                    '<td>' +
                        this.genereteBuySaleHtml(bankObject[i], 'rateSale', 'rateSaleDelta') +
                    '</td>' +
                '</tr>';
    };

    var valCurrencyText = document.querySelector('.val-currency-text'),
        tableHaed = '<table class="-new-currensy">' +
                '<tr>' +
                    '<th>' +
                        '<span>Банк</span>' +
                    '</th>' +
                    '<th>' +
                        '<span style="font-size: 18px">&#402;</span>' +
                    '</th>' +
                    '<th>' +
                        '<span>Покупка</span>' +
                    '</th>' +
                    '<th>' +
                        '<span>Продажа</span>' +
                    '</th>' +
                '</tr>' +
                bank +
            '</table>';

    valCurrencyText.insertAdjacentHTML('afterBegin', tableHaed);
};

function Slider(slider) {
	if(!slider) return;

	var self = this;

	self.slider = document.querySelector('.val-list-slider');
	self.liSlides = self.slider.querySelectorAll('li');
	self.pagination = document.querySelector('.val-display-controls');
	self.count = self.liSlides.length;
	self.liWidth = parseInt(window.getComputedStyle(self.slider.firstElementChild).getPropertyValue('width'));
	var paginationsStr = '';

	for (var i = 0; i < self.liSlides.length; i++) {
		paginationsStr += '<span></span>'
	};

	this.cssGenerator('width', self.count * self.liWidth, self.slider);

	self.pagination.insertAdjacentHTML('afterBegin', paginationsStr);	

	this.setAttributes();
	
	self.pagin = self.pagination.children;
	self.pagin[0].classList.add('active');	
	self.paginActive = self.pagination.querySelector('.active');
	self.paginActiveAttr = self.paginActive.getAttribute('data-controls');
	self.moveSlide = function() {
		var target = event.target,
			dataControls = target.getAttribute('data-controls');
		self.paginActive.classList.remove('active');
		target.classList.add('active');
		self.paginActive = self.pagination.querySelector('.active');

		var propX = 0;

		if(dataControls > self.paginActiveAttr) {
			propX = -self.liWidth * dataControls;
		} 
		else if (dataControls < self.paginActiveAttr) {
			propX = self.liWidth * dataControls;
		}		
		self.slider.style.transform = 'translateX(' + propX + 'px)';
        console.log(self.slider.style.transform);
	};

	self.pagination.addEventListener('click', self.moveSlide);
}

Slider.prototype.cssGenerator = function(prop, val, el) {
	el.style.cssText = prop + ':' + (val) + 'px';
};

Slider.prototype.setAttributes = function() {
	var spans = this.pagination.querySelectorAll('span');
	for (var i = 0; i < spans.length; i++) {
		spans[i].setAttribute('data-controls', i);
	};
};
function Weather() {
    var xhr = new XMLHttpRequest();

    var self = this;

    xhr.open('GET', 'https://query.yahooapis.com/v1/public/yql?q=select%20item%20from%20weather.forecast%20where%20woeid%3D918233%20and%20u%3D%22c%22&format=json&l=ru', true);

    xhr.onreadystatechange = function() {
        if(xhr.status == 200 && xhr.readyState == 4) {

            var xhrObj = JSON.parse(xhr.responseText);

            self.getProp(xhrObj, 'item', self.constructorNodes, self);

        };
    };

    xhr.send();

    this.getProp = function(obj, propObj, callback, self) {
        for(var key in obj) {
            if(key == propObj) {
                callback(obj[key], self);
            } else if( typeof obj[key] == 'object') {
                self.getProp(obj[key], propObj, callback, self);
            };
        };
    }
};

Weather.prototype.constructorNodes = function(val, self) {
    var outerForWeather = document.querySelector('.outer-for-weather'),
        html = '<div class="drop-weather-button">' +
                  '<div class="outer-today-ico">' +
                      '<span class="icons-for-c-min icon-weather-min-' + val.condition.code + '"></span>' +
                      '<i class="today-weather">' + val.condition.temp + ' С°</i>' +
                  '</div>' +
                  '<div class="drop-wether">' +
                      '<p class="for-genwether"><span class="title-weather">Погода</span><span class="city-weather">Украина,  Чернигов</span></p>' +
                      '<div class="section-today">' +
                    '<div class="for-weather-icon">' +
                      '<h5 class="section-heading">Сьогодні</h5>' +
                      '<span class="icons-for-c icon-weather-' + val.condition.code + '"></span>' +
                    '</div>' +
                  '<div class="weather-detail">' +
                      '<h4 class="weather-heading">' +
                          '<span class="temp-now">' + val.condition.temp + ' С° </span>' +
                          '<span class="phrase">Температура зараз</span>' +
                      '</h4>' +
                      // '<span class="temperature high-temperature">' + this.forecast_today_HighTemp + ' С° - </span>' +
                      // '<span class="temperature low-temperature">' + this.forecast_today_LowTemp + ' С°</span>' +
                      '<p class="summary">' + val.condition.text + '</p>' +
                  '</div>' +
                      '</div>' +
                      '<div class="section-this-week">' +
                          '<h5 class="section-heading">Тиждень</h5>' +
                          '<ul class="item-list-temperature">' +
                                self.getForecast(val.forecast, self);
                          '</ul>' +
                      '</div>' +
                  '</div>' +
              '</div>';

    outerForWeather.insertAdjacentHTML('afterBegin', html);
};

Weather.prototype.getForecast = function(val, self) {

    var getDay = function(day) {
        var days = {
            Mon: 'Понедiлок',
            Tue: 'Вiвторок',
            Wed: 'Середа',
            Thu: 'Четвер',
            Fri: 'П`ятниця',
            Sat: 'Субота',
            Sun: 'Недiля'
        };

    return days[day];
    };

    var htmlList = '';

    for(var i =1; i < 5; i++) {
        htmlList += '<li class="item-time-temperature">' +
                        '<span class="icons-for-c icon-weather-' + val[i].code + '"></span>' +
                        '<span class="day">' + getDay(val[i].day) + ' ' + '</span>' +
                        '<span class="temperature-days high-temperature">' + val[i].high + ' С° </span>' +
                        '<span class="temperature-days low-temperature">' + val[i].low + ' С° </span>' +
                    '</li>';
    };

    return htmlList;

};

Weather.prototype.weatherDescription = function(val) {
    var description = {
        0: 'Торнадо',
        1: 'Тропічний шторм',
        2: 'Ураган',
        3: 'Сильні грози',
        4: 'Грози',
        5: 'Змішаний дощ зi снігом',
        6: 'Змішаний дощ зi снігом',
        7: 'Змішаний дощ зi снігом',
        8: 'Паморозь',
        9: 'Мряка',
        10: 'Град',
        11: 'Зливи',
        12: 'Зливи',
        13: 'Сніговi пориви',
        14: 'Легкий сніг',
        15: 'Хуртовина',
        16: 'Снiг',
        17: 'Град',
        18: 'Дощ зі снігом',
        19: 'Туманно',
        20: 'Туманно',
        21: 'Туманно',
        22: 'Туманно',
        23: 'Вітрянно',
        24: 'Вітрянно',
        25: 'Прохолодно',
        26: 'Хмарно',
        27: 'Переважно хмарно',
        28: 'Переважно хмарно',
        29: 'Мінлива хмарність',
        30: 'Мінлива хмарність',
        31: 'Ясно',
        32: 'Сонячно',
        33: 'Ясно',
        34: 'Ясно',
        35: 'Змішаний дощ з градом',
        36: 'Спекотно',
        37: 'Грози',
        38: 'Розсіяні грози',
        39: 'Розсіяні грози',
        40: 'Мінлива хмарність',
        41: 'Сильний снігопад',
        42: 'Снігопад',
        43: 'Сильний снігопад',
        44: 'Мінлива хмарність',
        45: 'Зливи',
        46: 'Зливовий сніг',
        47: 'Зливи'
    };

    return description[val];
}; 
function PopUp() {
	var valRightButton = document.querySelector('.val-outer-right-button'),
		valRedaction = document.querySelector('.val-redaction'),
		closeModals = document.querySelectorAll('.val-close-modals'),
		rememberPassBtn = document.querySelectorAll('.-val-remember-pass');
	this.valModalOuter = document.querySelector('.val-modal-login-reg-outer');

	valRightButton.addEventListener('click', this.showModal.bind(this));
	valRedaction.addEventListener('click', this.showModal.bind(this));
	for (var i = 0; i < closeModals.length; i++) {
		closeModals[i].addEventListener('click', this.hideModals.bind(this));
	};
	// this.valModalOuter.addEventListener('click', this.hideModals.bind(this));
	for (var i = 0; i < rememberPassBtn.length; i++) {
		rememberPassBtn[i].addEventListener('click', this.changingLoginForm.bind(this));
	};
};

PopUp.prototype.showModal = function() {
	var target = event.target,
		attr = target.getAttribute('data-attr'),
		modal = document.querySelector('.' + attr),
		rememberPassForm = document.getElementById('remember'),
		loginForm = document.getElementById('login');

	modal.style.cssText = 'display: block; opacity: 1';
	this.valModalOuter.style.cssText = 'display: block; opacity: 1';
};

PopUp.prototype.hideModals = function() {
	var target = event.target;
	if(target.classList.contains('val-close-modals')) {		
		target.parentElement.style.cssText = 'opacity: 0; display: none;';
	};
	this.valModalOuter.style.cssText = 'opacity: 0; display: none;';
}; 

PopUp.prototype.changingLoginForm = function() {	
	var rememberPassForm = document.getElementById('remember'),
		loginForm = document.getElementById('login');

	if(getComputedStyle(rememberPassForm).display == 'none') {
		loginForm.style.cssText = 'display: none;';
		rememberPassForm.style.cssText = 'display: block;';
	} else{
		rememberPassForm.style.cssText = 'display: none;';
		loginForm.style.cssText = 'display: block;';
	};
};
function Category() {
	var categXhr = new XMLHttpRequest();
	this.id = 1;
	categXhr.open('GET', '/site/GetCategory?id='+ this.id, true);

	categXhr.onreadystatechange = function() {
		if(categXhr.status == 200 && categXhr.readyState == 4) {
			var fullXhrObj = JSON.parse(categXhr.responseText),
				categorysObj = JSON.parse(fullXhrObj.category),
				newsObj = JSON.parse(fullXhrObj.news);
			console.log(fullXhrObj);
			console.log(categorysObj);
			console.log(newsObj);
		};
	};

	categXhr.send();
};

Category.prototype.categBlockTemplate = function() {
	var fullWidthCategory = document.querySelector('.val-full-width-category'),
		categoryBlock = '<div class="val-category-block">' + 
						'<h2 class="val-title-uppercase-with-line">(Название категории в зависимости от языка)</h2>' + 
							'<div class="val-news-list-category">' + 								
								'(Шаблон для вставки либо с изображениями либо без)' + 
							'</div>' +
						'</div>';
};
